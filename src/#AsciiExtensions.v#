Require Import Coq.NArith.NArith.
Require Import Coq.Init.Nat.
Require Import Coq.Strings.Ascii.

(* Returns the comparison of two ASCII characters. *)
Definition compare_ascii (c1 c2 : ascii) : comparison  :=
  N.compare (N_of_ascii c1) (N_of_ascii c2).

(* Proves that a comparison of two ASCII characters implies their equality. *)
Lemma compare_ascii_implies_eq : forall (c1 c2 : ascii),
  compare_ascii c1 c2 = Eq -> c1 = c2.
Proof.
  intros.
  rewrite <- ascii_N_embedding with (a := c1).
  rewrite <- ascii_N_embedding with (a := c2).
  f_equal.
  now apply N.compare_eq_iff.
Qed.

(* Boolean equality for ASCII characters. *)
Definition beq_ascii (c1 c2 : ascii) : bool :=
  match compare_ascii c1 c2 with
    | Eq => true
    | _ => false
  end.

(* Boolean less than for ASCII characters. *)
Definition blt_ascii (c1 c2 : ascii) : bool :=
  match compare_ascii c1 c2 with
    | Lt => true
    | _ => false
  end.

(* Boolean greater than for ASCII characters. *)
Definition bgt_ascii (c1 c2 : ascii) : bool :=
  match compare_ascii c1 c2 with
    | Gt => true
    | _ => false
  end.

(* Boolean equality for option ASCII characters. *)
Definition beq_option_ascii (c1 c2 : option ascii) : bool :=
  match c1, c2 with
    | None, None => true
    | Some c1', Some c2' => beq_ascii c1' c2'
    | _, _ => false
  end.
